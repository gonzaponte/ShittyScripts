#!/usr/bin/python

from __future__ import print_function

import os
import sys
import glob
import time
import shutil
import argparse
import subprocess as sp


SPECIAL_FOLDERS = "Backdrops Contents Pictures Originals Recents.plist".split()
BACKUP_FOLDER   = "Backups.backupdb"
PRIVATE_FOLDER  = ".HFS+ Private Directory Data\r"


def private_path(full_path):
    basepath = full_path[:full_path.index(BACKUP_FOLDER)]
    return os.path.join(basepath, PRIVATE_FOLDER)


def redirect(code):
    return os.path.join(bkp_folder, "dir_{}".format(code))


def read_file_from_ls(line):
    tokens = line.split()
    for t in tokens[:8]:
        line = line[len(t):].lstrip()
    return line


def read_code_from_ls(line):
    return line.split()[1]


def full_ls(path, verbose):
    output = sp.check_output(["ls", "-lha", path])

    for line in filter(len, output.split("\n")):
        if line.startswith("total"): continue
        
#        tokens   = line.split()
#        index    = line.index(tokens[8])
#        index    = sum(map(len, tokens[:8])) + 8
#        fullname = " ".join(tokens[8:])
#        fullname = line[index:]
        fullname = read_file_from_ls(line)
        code     = read_code_from_ls(line)
        basename = os.path.basename(fullname)
        if "/" not in fullname:
            fullname = os.path.join(path, fullname)

        if basename.startswith("."): continue # hidden
        if " -> " in basename      : continue # alias

        if verbose > 2:
            print("line", repr(line))
            print("full", repr(fullname))
            print("base", repr(basename))

        yield fullname, basename, int(code)


def copy(from_, to, verbose):
    if verbose > 0:
        print("Copying", repr(from_), "--->", repr(to))
    try:
        shutil.copy(from_, to)
    except Exception as e:
        print("Something went wrong:")
        print("="*50)
        print(e)
        print("Full dir:", repr(from_))
        print("Is a directory:", os.path.isdir(from_))
        print("="*50)
        if "n" in raw_input("Carry on? (Y/n)"):
            raise


def create_dir(path, verbose, exist_ok=True):
    if verbose > 1:
        print("Creating directory", path)

    if   not os.path.exists(path):
        os.mkdir(path)
    elif not exist_ok:
        raise ValueError("Directory already exists")


def copy_items(from_, to, ask, skip, verbose):
    if verbose > 2:
        print("Calling copy_items with arguments")
        print(repr(from_))
        print("and")
        print(repr(to))
    for full, base, code in full_ls(from_, verbose):
        if verbose > 2:
            print(repr(full), code, os.path.isdir(full), os.path.exists(full))

        for skip in skips:
            if skip in basename:
                continue

        if ask:
            if "n" in raw_input("Save <{}>?".format(full)):
                continue

        if base in SPECIAL_FOLDERS and code == 501:
            if base in "Pictures Originals".split():
                copy(full, to, verbose)
            continue

        if code > 1000 or os.path.isdir(full):
            new_folder = os.path.join(to, base)
            create_dir(new_folder, verbose, exist_ok=False)

            copy_items(redirect(code) if code > 1000 else full,
                       new_folder, ask, skip, verbose)
            continue

        if code < 1000:
            copy(full, os.path.join(to, base), verbose)
            continue

        raise ValueError(repr(full))

parser = argparse.ArgumentParser()
parser.add_argument("input_folder" , type=os.path.abspath)
parser.add_argument("output_folder", type=os.path.abspath)
parser.add_argument("-v", "--verbose", action="count")
parser.add_argument("-i", "--interactive", action="store_true")
parser.add_argument("-s", "--skip", type=str, nargs="*", default=())

args = parser.parse_args(sys.argv[1:])

input_folder  = args. input_folder
output_folder = args.output_folder
verbose       = args.verbose
interactive   = args.interactive
skips         = args.skip
bkp_folder    = private_path(input_folder)

create_dir(output_folder, args.verbose, exist_ok=True)

copy_items(input_folder, output_folder, interactive, skips, verbose)
